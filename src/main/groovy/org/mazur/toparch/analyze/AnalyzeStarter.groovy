package org.mazur.toparch.analyze;org.mazur.toparch.analyze.mazur.toparch;AnalyzeStarter org.mazur.toparchimport groovy.swing.SwingBuilderimport javax.swing.WindowConstants as WCimport javax.swing.JTableimport javax.swing.JScrollPaneimport java.awt.BorderLayoutTopologyGenerator generator = new MeshGenerator() //new PyramidsGenerator() //new CirclesGenerator() //new SpiralGenerator() //new FibonachiGenerator() //   def columns = TopologyInfo.fields().collect() { it.toUpperCase() }.toArray()FileWriter output = new FileWriter("out-${generator.class}.txt")columns.each() { output << it << '\t' }output << '\n'int iterationsCount = 100def data = new Object[iterationsCount][columns.length]int skip = 10iterationsCount.times() { rowIndex ->  println "Iteration $rowIndex"  boolean[][] m = generator.nextMatrix()  //if (rowIndex % skip) { return }  if (m.length <= 600) { return }//  m.each() {//    it.each() { print it ? 1 : 0; print ' ' }//    println ""//  }  TopologyAnalyzer analyzer = new TopologyAnalyzer('matrix' : m)  TopologyInfo info = analyzer.analyze()  output << info.serialize()  output.flush()  def row = info.formRow()  int index = 0  row.eachWithIndex() { v, i ->    data[rowIndex][i] = v  }}output.close()JTable table = new JTable(data, columns)JScrollPane scrollPane = new JScrollPane(table)SwingBuilder.build() {  def mainFrame = frame(title : 'toparch', pack : true, defaultCloseOperation : WC.EXIT_ON_CLOSE) {    panel(layout : new BorderLayout(), constraints : BorderLayout.NORTH) {      widget(scrollPane)    }  }  mainFrame.visible = true}